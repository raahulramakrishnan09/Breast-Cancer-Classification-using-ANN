# -*- coding: utf-8 -*-
"""Breast_Cancer_Classification_using_ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EbRj6Z7eF88ykGTm1xEqBFl0QdIEGDT3
"""

import numpy as np
import pandas as pd

from sklearn.datasets import load_breast_cancer
dataset=load_breast_cancer()
dataset

df=pd.DataFrame(dataset.data,columns=dataset.feature_names)
df

df['labels']=dataset.target
df

#Exploratory_data_analysis
df.info()

df.head()

df.tail()

df.describe()

df.shape

df.isnull().sum()

a=df['mean area']
b=df['area error']

import matplotlib.pyplot as plt
import seaborn as sns

#boxplot
plt.figure(figsize=(20,15))
plotnumber=1
for col in df.columns:
  if plotnumber<=31:
    plt.subplot(6,6,plotnumber)
    sns.boxplot(df[col])
    plt.xlabel(col,fontsize=15)
  plotnumber+=1
plt.tight_layout()
plt.show()

#heatmap
plt.figure(figsize=(20,15))
corr=df.corr()
sns.heatmap(corr,annot=True,fmt='.2g',linewidth=1)
plt.tight_layout()
plt.show()

x=df.drop('labels',axis=1)
y=df['labels']

#training_and_testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)

#Standardization
from sklearn.preprocessing import StandardScaler
f=StandardScaler()
x_train=f.fit_transform(x_train)

x_train

import tensorflow as tf
from tensorflow import keras

#Sequential_model
#input_layer,hidden_layer,output_layer
model=keras.Sequential([keras.layers.Flatten(input_shape=(30,)),
                        keras.layers.Dense(20,activation='relu'),
                        keras.layers.Dense(15,activation='relu'),
                        keras.layers.Dense(10,activation='relu'),
                        keras.layers.Dense(2,activation='sigmoid')])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history=model.fit(x_train,y_train,validation_split=0.1,epochs=10)

#accuracy_and_val_accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training data','validation data'],loc='lower right')

#loss_and_val_loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.xlabel('loss')
plt.ylabel('epochs')
plt.legend(['training data','validation data'],loc='upper right')

#x_test
x_test=f.fit_transform(x_test)
x_test

y_pred=model.predict(x_test)

y_pred=np.argmax(y_pred,axis=1)
y_pred

#accuracy_score
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)